// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.appins;

import com.azure.appins.models.ExceptionDataException;
import com.azure.appins.models.TelemetryEnvelope;
import com.azure.appins.models.TrackResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the ApplicationInsightsClient type. */
public final class ApplicationInsightsClient {
    /** The proxy service used to perform REST calls. */
    private final ApplicationInsightsClientService service;

    /** Breeze endpoint: https://dc.services.visualstudio.com. */
    private final String endpoint;

    /**
     * Gets Breeze endpoint: https://dc.services.visualstudio.com.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** Initializes an instance of ApplicationInsightsClient client. */
    ApplicationInsightsClient(String endpoint) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint);
    }

    /**
     * Initializes an instance of ApplicationInsightsClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    ApplicationInsightsClient(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of ApplicationInsightsClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     */
    ApplicationInsightsClient(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service =
                RestProxy.create(
                        ApplicationInsightsClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for ApplicationInsightsClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{Endpoint}/v2")
    @ServiceInterface(name = "ApplicationInsightsC")
    private interface ApplicationInsightsClientService {
        @Post("/track")
        @ExpectedResponses({200, 206, 400, 402, 429, 500, 503})
        @UnexpectedResponseExceptionType(ExceptionDataException.class)
        Mono<Response<TrackResponse>> track(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") List<TelemetryEnvelope> body,
                Context context);
    }

    /**
     * This operation generates a model using an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Array of TelemetryEnvelope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ExceptionDataException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing the status of each telemetry item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TrackResponse>> trackWithResponseAsync(List<TelemetryEnvelope> body) {
        return FluxUtil.withContext(context -> service.track(this.getEndpoint(), body, context));
    }

    /**
     * This operation generates a model using an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Array of TelemetryEnvelope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ExceptionDataException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing the status of each telemetry item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TrackResponse>> trackWithResponseAsync(List<TelemetryEnvelope> body, Context context) {
        return service.track(this.getEndpoint(), body, context);
    }

    /**
     * This operation generates a model using an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Array of TelemetryEnvelope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ExceptionDataException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing the status of each telemetry item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrackResponse> trackAsync(List<TelemetryEnvelope> body) {
        return trackWithResponseAsync(body)
                .flatMap(
                        (Response<TrackResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * This operation generates a model using an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Array of TelemetryEnvelope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ExceptionDataException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing the status of each telemetry item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrackResponse> trackAsync(List<TelemetryEnvelope> body, Context context) {
        return trackWithResponseAsync(body, context)
                .flatMap(
                        (Response<TrackResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * This operation generates a model using an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Array of TelemetryEnvelope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ExceptionDataException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing the status of each telemetry item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrackResponse track(List<TelemetryEnvelope> body) {
        return trackAsync(body).block();
    }

    /**
     * This operation generates a model using an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Array of TelemetryEnvelope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ExceptionDataException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing the status of each telemetry item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrackResponse track(List<TelemetryEnvelope> body, Context context) {
        return trackAsync(body, context).block();
    }
}
